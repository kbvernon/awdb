---
format: gfm
knitr:
  opts_chunk:
    collapse: true
    comment: "#>"
    fig-align: center
    fig-path: "man/figures/README-"
    fig-format: svg
default-image-extension: ""
---

<!-- README.md is generated from README.qmd. Please edit that file -->

# awdb

<!-- badges: start -->
[![R-CMD-check](https://github.com/kbvernon/awdb/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/kbvernon/awdb/actions/workflows/R-CMD-check.yaml)
[![CRAN status](https://www.r-pkg.org/badges/version/awdb)](https://CRAN.R-project.org/package=awdb)
[![extendr](https://img.shields.io/badge/extendr-^0.8.0-276DC2)](https://extendr.rs/extendr/extendr_api/)
<!-- badges: end -->

The `{awdb}` package provides functions for querying the four endpoints of the 
[Air and Water Database (AWDB) REST API](https://wcc.sc.egov.usda.gov/awdbRestApi/swagger-ui/index.html) 
maintained by the National Water and Climate Center (NWCC) at the United States 
Department of Agriculture (USDA). Endpoints include data, forecast, 
reference-data, and metadata. The package is extremely light weight, with Rust 
via [`extendr`](https://extendr.rs/) doing most of the heavy lifting 
to deserialize and flatten deeply nested JSON responses. The package is also 
designed to support pretty printing of `tibble`s if you import the `{tibble}` 
package.

## Installation

You can install the release version of `{awdb}` from CRAN with:

``` r
install.packages("awdb")
```

Or you can get the development version from [GitHub](https://github.com/) with:

``` r
# install.packages("pak")
pak::pak("kbvernon/awdb")
```

## The AWDB REST API

This package provides a separate function to query each endpoint at the USDA 
AWDB REST API: 

| Endpoint       | Function           |
| :------------- | :----------------- |
| data           | `get_elements()`   |
| forecasts      | `get_forecasts()`  |
| reference-data | `get_references()` |
| metadata       | `get_stations()`   |

Because the API does not provide for spatial queries, requests made 
with areas of interest (`aoi`) first ask the API metadata endpoint for all 
stations in the database and their spatial coordinates. It converts the set to 
an `sf` object, performs a spatial filter with the `aoi`, and then sends 
another request for `elements` or `forecasts` at the stations in the `aoi`.

## Get Stations

Find all AWDB stations around Bear Lake in northern Utah that measure soil 
moisture percent at various depths. 

```{r}
#| warning: false

library(awdb)
library(sf)
library(tibble)

stations <- get_stations(bear_lake, elements = "SMS:*")

stations
```

::: {style="width: 65%; margin: 0 auto;"}

```{r stations}
#| echo: false
#| warning: false
par(mar = rep(0, 4))

basemaps::basemap(
  bear_lake,
  map_service = "esri",
  map_type = "world_topo_map",
  verbose = FALSE
)

plot(
  bear_lake |> st_transform(3857),
  lwd = 2.5,
  add = TRUE
)

plot(
  stations |> st_geometry() |> st_transform(3857),
  pch = 19,
  col = "white",
  cex = 1.7,
  add = TRUE
)

plot(
  stations |> st_geometry() |> st_transform(3857),
  pch = 21,
  col = "#752100",
  bg = "#FD4D00",
  cex = 1.3,
  lwd = 1,
  add = TRUE
)
```

:::

## Get Elements

USDA NWCC refers to soil, snow, stream, and weather variables measured at AWDB 
stations as "elements." Here we get snow water equivalent and soil moisture 
measurements around Bear Lake in early May of 2015.

```{r}
elements <- get_elements(
  bear_lake,
  elements = c("WTEQ", "SMS:8"),
  awdb_options = set_options(
    begin_date = "2015-05-01",
    end_date = "2015-05-07"
  )
)

elements[c(
  "station_triplet",
  "element_code",
  "element_values"
)]

elements[["element_values"]][[1]]
```

These are time series, so the element values come in a list column containing
data.frames with at least `date` and `value` columns. Using `tidyr::unnest()` is
helpful for unpacking all of them.

## Get Forecasts

Get streamflow forecasts for the Cascades in west central Oregon. As with 
`get_elements()`, this returns a list column.

```{r}
forecasts <- get_forecasts(cascades, elements = "SRVO")

forecasts[c(
  "station_triplet",
  "element_code",
  "publication_date",
  "forecast_period",
  "forecast_values"
)]

forecasts[["forecast_values"]][[1]]
```

## Get References

A somewhat unique endpoint for this REST API is called "References." If you have
ever worked with government employees or the military, you maybe are aware that 
they prefer an extremely condensed form of speech jammed full of acronyms and 
other codes. The references endpoint helps clarify their cryptic language with 
data dictionaries that explain what each code used in the database actually 
means. It also in the process provides an exhaustive list of available options. 
All of this, you can access with `get_references()`. For instance, if you want a 
table showing all possible station elements in the AWDB, it is as simple as 
this.

```{r}
get_references("elements")
```

## Additional Query Parameters

In the above examples, we use `set_options()` to pass additional query 
parameters. If you don't pass any arguments, it uses defaults assumed by the 
AWDB REST API. [**It's important to note that not all parameters are passed to 
every endpoint.**]{style="color: #3273a8;"} The references endpoint, for 
example, doesn't take any query parameters other than `reference_type`. To see 
what goes where, you can print the `awdb_options` list returned by 
`set_options()`. This will also show you the current values for each parameter. 

```{r}
set_options()
```
